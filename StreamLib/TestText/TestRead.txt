Stream 是所有流的抽象基类。 流是字节序列的抽象，例如文件、输入/输出设备、进程中通信管道或 TCP/IP 套接字。 Stream类和其派生的类提供的输入和输出，这些不同类型的一般视图，并使程序员不必了解操作系统和基础设备的具体细节。 

流涉及三个基本操作： 

•您可以从流中读取。 读取是将数据从一个流传送到数据结构，如字节数组。 


•可以写入流。 写作是数据的数据结构传输到流。 


•流可以支持查找。 查找引用查询和修改流中的当前位置。 查找功能取决于流有的后备存储的类型。 例如，网络流的当前位置，没有统一概念，并且因此通常不支持搜寻。 


一些较常用的流的继承Stream都FileStream，和MemoryStream。 

根据基础数据源或存储库，流可能支持仅某些功能。 可以通过使用查询流的功能CanRead， CanWrite，并CanSeek的属性Stream类。 

Read和Write方法读取和写入不同的格式的数据。 对于支持查找的流，使用Seek并SetLength方法并Position和Length属性，以查询和修改的当前位置和流的长度。 

此类型实现IDisposable接口。 在使用完类型后，您应直接或间接释放类型。 若要直接释放类型，调用其Dispose中的方法try / catch块。 若要间接释放类型，请使用 using（在 C# 中）或 Using（在 Visual Basic 中）等语言构造。 有关详细信息，请参阅中的"使用对象实现 IDisposable"一节IDisposable接口主题。 

释放Stream对象会刷新所有缓冲的数据，并实质上是调用Flush为您的方法。 Dispose 也会释放操作系统资源，例如文件句柄、 网络连接或用于任何内部缓冲的内存。 BufferedStream类提供的另一个流以便提高读取和写入性能周围包装缓冲的流的功能。 

从开始.NET Framework 4.5，则Stream类包括异步方法来简化异步操作。 异步方法包含Async中其名称，如ReadAsync， WriteAsync， CopyToAsync，和FlushAsync。 这些方法，可执行占用大量资源的 I/O 操作而不会阻止主线程。 在 Windows 8.x 应用商店 应用或 桌面 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。 结合使用异步方法async和awaitVisual Basic 和 C# 中的关键字。 

在中使用时Windows 8.x 应用商店应用程序中，Stream包括两个扩展方法：AsInputStream和AsOutputStream。 这些方法将转换Stream向流中的对象Windows 运行时。 此外可以将转换中的流Windows 运行时到Stream通过使用对象AsStreamForRead和AsStreamForWrite方法。 有关详细信息，请参阅如何：在 .NET Framework 流和 Windows 运行时流之间进行转换 

某些流实现执行本地缓冲的基础数据以提高性能。 对于此类流，你可以使用Flush或FlushAsync方法以清除所有内部缓冲区并确保所有数据，已都写入到基础数据源或存储库。 

如果你需要具有无后备存储 （也称为位存储桶） 的流，使用Null检索为此目的设计的流的实例字段。
